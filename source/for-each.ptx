
<section xml:id="for-each">
    
        <title>For-Each Loops</title>
    

<p>While loops used to iterate over an array often looked very similar, so for loops were introduced as a more concise way to handle the task. <term>For-Each Loops</term> were introduced in Java 5 as an even more concise way to deal with these tasks, and are preferred whenever the programmer intends to iterate over each element of an array <em>sequentially</em> (that is, starting with the first, then the second, and so on until the last element).
</p>

    <p>
A for-each loop eliminates the index variable <c>i</c> entirely. Instead, the programmer must define a new variable that will hold a single element of the array through each iteration of the loop. The same keyword <c>for</c> is used. Following the definition of this new variable, the programmer must include a colon (<c>:</c>) and then an expression yielding the array to be iterated over (usually just a variable reference).
    </p>


<example>
    <p>Consider the following array of Strings:</p>

<program language="java"><input>
String[] names = new String[] { "Jane", "Billy", "Susie" };
</input></program>

<p>A for loop could be used to print each name out:</p>

<program language="java"><input>
for(int i=0; i &lt; names.length; i++) {
    System.out.println(names[i]);
}
</input></program>

<p>The following for-each loop will perform the exact same task with a little less code, and is a little easier to read and understand:
</p>

<program language="java"><input>
for(String name : names) {
    System.out.println(name);
}
</input></program>

<p>This makes it easier to use arbitrary expressions that yield arrays. For example, the following code snippet also does the same thing as the previous two, but doesn't require the initial variable definition:
</p>

<program language="java"><input>
for(String name : new String[] { "Jane", "Billy", "Susie" }) {
    System.out.println(name);
}
</input></program>
</example>
</section>
