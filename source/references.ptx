
<section xml:id="references">
        <title>Object References</title>
        <p>
            An important and subtle distinction in dealing with object type variables is that the values they hold are not the objects themselves, but rather <term>references</term> to the objects. In this sense, the <c>null</c> value indicates that a variable is not referencing any object value.
        </p>
        <p>
            This doesn't have particularly important implications when dealing with <term>immutable</term> objects like strings (immutable meaning that the values within the object cannot be changed). However, when we use a <term>mutable</term> object like an array, we need to be careful.
        </p>
        <subsection>
            <title>Copying Object References</title>
            <p>
                If you have a variable of type <c>int</c> and copy its value to another variable, you can expect that the value is truly copied. For example:

<program language="java"><input>
int x = 5;
int y = x;
x = 10;
</input></program>

                Tracing through this example, the value 5 was first assigned to x, then copied from x to y. Thus, when the value 10 is assigned to x on the last line, the copy of the value 5 held by y remains. Evaluating y would still yield the value 5.

                However, consider the following code:

<program language="java"><input>
int[] x = new int[] {5};
int[] y = x;
x[0] = 10;
</input></program>

                What would y[0] be? In this case, it would also be 10. Tracing through this example, in the first line, an array is created holding just one value, 5, and a reference to this array object is stored in the variable x. Next, the reference to this object is copied from x and stored in y. That is, both x and y are holding references to the same object! The third line changes the value inside of this array, meaning that both x and y are now referencing an array that contains the value 10!

            </p>
        </subsection>
        <subsection>
            <title>Methods with Side Effects</title>
            <p>
                In prior sections we've developed methods that take some kind of input, perform some calculations on the input, and produce an output without affecting the values that were passed in. Consider the following code:

<program language="java"><input>
int x = 5;
int y = 10;
System.out.println(Math.max(x, y));
System.out.println(x);
System.out.println(y);
</input></program>

                This code will print the values 10, 5, and 10 on three separate lines. In particular, we can rest assured that Math.max has no impact on the values that x and y hold. This is because Math.max has no <term>side effects</term>; that is, it does not have any impact on any part of a program calling it (other than its own local variables).
              </p>
              <p>
                This is not true of every method. For example, calling <c>System.out.println()</c> modifies the global state of the program, since it writes to standard output.
              </p>
              <p>
                Consider the following method:

<program language="java"><input>
void clearArray(int[] arr) {
    for(int i=0; i &lt; arr.length; i++) {
      arr[i] = 0;
    }
}
</input></program>
                    Note that the method above has no return value. It modifies the state of an array value that is passed in. This is another example of a potentially useful side effect. Clearly not all side effects are bad, but inadvertent or unexpected side effects are the source of many confusing and troublesome bugs in more complex programs.
            </p>
        </subsection>
    </section>
