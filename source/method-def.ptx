
<section xml:id="method-definitions">
    
        <title>Method Definitions</title>
    
    
    <p>In prior sections we used method calls to do some of the computing for us. For example, a call to the <c>max</c> method in the <c>Math</c> class was a simple way to achieve what would have otherwise required more detailed code. In this section you will learn how to define your own custom methods. 
    </p>
    
    <p>
        Method definitions are a bit more involved than our previous topics. Methods take data (arguments) as input (through <term>parameters</term>) and return data as output (called the <term>return value</term>). The data types for both a method's input and output must be specified (similar to how you could specify the data type when you create a variable, though in this case it's required). Below is a diagram of the syntax of a method definition.
    </p>
  
    <figure>
        <title>method-definition</title>
        <caption>Anatomy of a Method Definition</caption>
        <image source="figures/method-definition.png"/>
    </figure>
  
        <p>
            A method definition consists of a header (or signature) defining the input and output data types, and a method body. Let's first take a look at the contents of the signature. First is a data type for the data returned by the method. For instance, the <c>abs</c> method in the <c>Math</c> class returns a double, so it's return type would be <c>double</c>. Next is the name of the method. 
        </p><p>
    So far, the definition looks a lot like a variable definition, but we're not quite finished. We also need to define parameters for the method. Parameters are variables that will hold the input values for the method (the input values are what we referred to as arguments in prior sections). Following the name of the method is a pair of parentheses with definitions of the parameters in between the parentheses. Each parameter definition consists of a data type followed by the name of the parameter (just like the variable definitions we saw previously but without the semicolon at the end). There may be zero or more parameter definitions, separated by commas. 
        </p><p>
    The method body consists of an open curly brace, 0 or more statements, and a closing curly brace. Unlike if statements, the method body must be contained within two curly braces (there is not option for a single-statement body with no curly braces). These statements can do anything you want with the restriction that your method must reach a special kind of statement called return statement when it is finished (with some exceptions -- but for now assume this is always true). The return statement must be the last statement executed in the method and it returns the value that a call to the method would evaluate to. 
    </p>
        
        <example><title>Square a Number</title>
        <p>Below is the definition of a method that will simply square the number passed in to it.</p>
<program language="java"><input>
int square(int x) {
  return x * x;
}
</input></program>
            <p>Note that it has only one parameter, <c>x</c>, and one statement in the method body, the return statement. Defining and then calling this method in jshell will look like this:</p>
            
<console>
<prompt>jshell> </prompt><input>int square(int x) {
   ...>   return x * x;
   ...> }</input>
|  created method square(int)

<prompt>jshell> </prompt><input>square(4)</input>
$2 ==> 16

<prompt>jshell> </prompt><input>square(10)</input>
$3 ==> 100

</console>
            
            <p>Notice that jshell doesn't include the name of the parameter <c>x</c>
            in the message reporting that you successfully defined the method. That's because the
            name of the parameter is ultimately not important. The parameter's name is meant to help
            make the code defining your method easier to read and understand, and also to describe
            the purpose of the parameter to the programmer writing code that calls it. What's most
            important from a functional perspective is that you've defined a method that can take an
                <c>int</c> type argument and that it will return another <c>int</c> type
            value to you. </p>
        </example>
        <example><title>Add Two Numbers</title>
            <p>Below is an example of a method definition with more than one parameter. It might not be particularly useful, but it demonstrates how to work with more than one argument in your methods:</p>
<program language="java"><input>
int add(int x, int y) {
  return x + y;
}
</input></program>     
            <p>Calling this method in jshell would look like this:</p>
<console>
<prompt>jshell> </prompt><input>add(4, 5)</input>
$2 ==> 9

<prompt>jshell> </prompt><input>add (10, -2)</input>
$3 ==> 8
</console>
        </example>
        
        <example><title>Ultimate Answer</title>
        <p>Some methods don't have any parameters at all. For example, below is the definition of a method that simply returns the value <c>42</c>:</p>
<program language="java"><input>
int ultimateAnswer() { 
  return 42;
}
</input></program>  
            <p>Calling this method in jshell would look like this:</p>
            
<console>
<prompt>jshell> </prompt><input>ultimateAnswer()</input>
$2 ==> 42    
</console>   
            <p>This method clearly doesn't do much and there are better alternatives to storing a single value, but there will be many opportunities for writing a meaningful method with no parameters as long as it performs some useful side effect, like printing to the screen.</p>
        </example>
    
</section>
