<!-- NOTE: this section is integrated from JavaJavaJava sections 11.1, 11.2, and 11.3 version 0b4e914 /-->
<section xml:id="fileio">
        <title>File Input and Output</title>
    

<subsection xml:id="introduction28"><!-- NOTE: this section is integrated from JavaJavaJava section 11.1 version 0b4e914 /-->
  <title>Introduction</title>
  <p>
    We have been using input and output in our programs since the very first chapters of the book.
    In this chapter we will take a closer look at Java's input and output elements.
  </p>
  <p>
    <term>Input</term> refers to information or data read from some external source into a running program.
    We introduced you to working with input in Chapter<nbsp/>4,
    when we developed the <c>KeyboardReader</c> class with methods for reading data from the keyboard into the console window.
    We also discussed reading data from the keyboard into a <c>JTextField</c> in a GUI interface,
    as well as  reading data from a text file using methods in the <c>Scanner</c> class during that chapter.
  </p>
  <p>
    <term>Output</term> refers to information or data written from the running program to some external destination.
    Up to this point, whenever our programs have produced output,
    it has been sent to either the Java console, to a text area,
    or to some other GUI component.
    These destinations are transitory,
    in the sense that they reside in the computer's primary memory and exist only so long as the program is running.
  </p>
  <p>
    A <term>file</term> is a collection of data that's stored on a disk or on some other relatively permanent storage medium.
    A file's existence does not depend on a running program.
    In this chapter,
    we will learn how to create files and how to perform input and output operations on their data using the 
    Java classes designed specifically for this purpose.
    Methods from these classes allow us to write data to files and provide greater flexibility in the way we 
    read data from files than the <c>Scanner</c> class offers.
  </p>
</subsection>


<subsection xml:id="streamsand-files"><!-- NOTE: this section is integrated from JavaJavaJava section 11.2 version 0b4e914 /-->
  <title>Streams and Files</title>
  <introduction>
    <p>
      As was noted in Chapter<nbsp/>4,
      all input and output (I/O) in Java is accomplished through the use of input streams and output streams.
      You are already familiar with input and output streams because we  have routinely used the <c>System.out</c> 
      output stream and and the <c>System.in</c> input stream (Fig.
      <xref ref="fig-systemout"></xref>) in this text's examples.
      Recall that <c>System.out</c> usually connects your program (source) to the screen 
      (destination) and <c>System.in</c> usually connects the keyboard (source) to the running program
      (destination).
      What you have learned about streams will also be a key for connecting files to a program.
    </p>
  <figure xml:id="fig-systemout">
    <caption>The <c>System.out</c> output stream connects your program
    to the screen and the <c>System.in</c> input stream connects it to the keyboard.</caption>
    <image width="73%" source="chptr11/sysinout.png"/>
  </figure>
  </introduction>
  <subsubsection xml:id="fig-datahier">
    <title>The Data Hierarchy</title>
    <p>
      Data, or information,
      are the contents that flow through Java streams and are stored in files.
      All data are comprised of binary digits or <em>bits</em>.
      A bit is simply a 0 or a 1, the electronic states that correspond to these values.
      As we learned in Chapter<nbsp/>5,
      a bit is the smallest unit of data.
    </p>
    <p>
      However, it would be tedious if a program had to work with data in units as small as bits.
      Therefore, most operations involve various-sized aggregates of data such as an 
      8-bit <c>byte</c>, a 16-bit <c>short</c>, a 16-bit <c>char</c>, a 32-bit <c>int</c>, a 64-bit <c>long</c>, a 32-bit
      <c>float</c>, or a 64-bit <c>double</c>. As we know,
      these are Java's primitive numeric types.
      In addition to these aggregates,
      we can group together a sequence of <c>char</c> to form a <c>String</c>.
    </p>
    <p>
      It is also possible to group data of different types into objects.
      A <term>record</term>,
          <idx><h>record</h></idx>
      which corresponds closely to a Java object,
      can have <term>fields</term>
          <idx><h>fields</h></idx>
      that contain different types of data.
      For example,
      a student record might contain fields for the student's name and address represented by (<c>String</c>s),
      expected year of graduation (<c>int</c>), and current grade point average represented by (<c>double</c>).
      Collections of these records are typically grouped into <em>files</em>.
    </p>
    <p>
      For example,
      your registrar's office may have a separate file for each of its graduating classes.
      These are typically organized into a collection of related files,
      which is called a <term>database</term>.
          <idx><h>database</h></idx>
     Taken together,
      the different kinds of data that are processed by a computer or stored in a file can be organized into a
      <term>data hierarchy</term>
          <idx><h>data hierarchy</h></idx>
      (<xref ref="fig-data-hier">Figure</xref>).
    </p>
    <figure xml:id="fig-data-hier">
    <caption>A data hierarchy.</caption>
     <image width="50%" source="chptr11/datahier.png"/>
    </figure> 
     <p>
      It's important to recognize that while we,
      the programmers,
      may group data into various types of abstract entities,
      the information flowing through an input or output stream is just a sequence of bits.
      There are no natural boundaries that mark where one byte
      (or one <c>int</c> or one record)
      ends and the next one begins.
      Therefore, it will be up to us to provide the boundaries as we process the data.
    </p>
  </subsubsection>
  <subsubsection>
    <title>Binary Files and Text Files</title>
    <p>
      As we noted in chapter<nbsp/>4,
      there are two types of files in Java:
      binary files and text files.
      Both kinds store data as a sequence of bits<mdash/>that is,
      a sequence of 0's and 1's.
      Thus, the difference between the two types of files lies in the way they are interpreted by the programs that read and write them.
      A <em>binary file</em> is processed as a sequence of bytes,
      whereas a <em>text file</em> is processed as a sequence of characters.
    </p>
    <p>
      Text editors and other programs that process text files interpret the file's sequence of 
      bits as a sequence of characters<mdash/>that is,
      as a string.
      Your Java source programs (<c>*.java</c>) are text files,
      and so are the HTML files that populate the World Wide Web.
      The big advantage of text files is their portability.
      Because their data  are represented in the ASCII code (<xref ref="fig-ASCII">Table</xref>), they can be read 
      and written by just about any text-processing program.
      Thus, a text file created by a program on a Windows computer can be read by a Macintosh program.
    </p>
    <p>
      In non-Java environments, data in binary files are stored as bytes,
      and the representation used varies from computer to computer.
      The manner in which a computer's memory stores binary data determines how it is represented in a file.
      Thus, binary data are not very portable.
      For example,
      a binary file of integers created on a Macintosh cannot typically be read by a Windows program.
    </p>
    <p>
      One reason for the lack of portability is that each type of computer uses its own 
      definition for how an integer is defined.
      On some systems  an integer might be 16 bits,
      and on others it might be 32 bits,
      so even if you know that a Macintosh binary file contains integers,
      that still won't make it readable by Windows programs.
      Another problem is that even if two computers use the same number of bits to represent an integer,
      they might use different representation schemes.
      For example,
      some computers might use 10000101 as the 8-bit representation of the number 133,
      whereas other computers might use the reverse, 10100001, to represent 133.
    </p>
    <p>
      The good news for us is that Java's designers have made its binary files
      <term>platform independent</term>
      by carefully defining the exact size and representation that must be used for 
      integers and all other primitive types.
      Thus, binary files created by Java programs can be interpreted by Java programs on any platform.
    </p>
    <principle>
      <title>Platform Independence</title>
      <p>
        Java binary files are platform independent.
        They can be interpreted by any computer that supports Java.
      </p>
    </principle>
  </subsubsection>
  <subsubsection xml:id="sec-streams">
    <title>Input and Output Streams</title>
    <p>
      Java has a wide variety of streams for performing I/O. They are defined in the <c>java.io</c> package,
      which must be imported by any program that does I/O. They are generally organized into the 
      hierarchy illustrated in <xref ref="fig-streamhier">Figure</xref>.
      We will cover only a small portion of the hierarchy in this text.
      Generally speaking,
      binary files are processed by subclasses of <c>InputStream</c> and <c>OutputStream</c>.  
      Text files are processed by subclasses of <c>Reader</c> and <c>Writer</c>, both of which are streams,
      despite their names.
    </p>
    <figure xml:id="fig-streamhier">
      <caption>Java's stream hierarchy.</caption>
      <image width="73%" source="chptr11/streamhier.png"/>
    </figure>
    <p>
    <c>InputStream</c> and <c>OutputStream</c> are abstract classes that serve as the root classes for 
    reading and writing binary data.
    Their most commonly used subclasses are <c>DataInputStream</c> and
    <c>DataOutputStream</c>, which are used for processing <c>String</c> data and data of any of Java's 
    primitive types<mdash/><c>char</c>,
    <c>boolean</c>, <c>int</c>, <c>double</c>, and so on.
    The analogues of these classes for processing text data are the <c>Reader</c> and <c>Writer</c> classes,
    which serve as the root classes for all text I/O.
    </p>
    <principle>
      <title>PROGRAMMING TIP: Choosing a Stream</title>
      <p>
        In choosing an appropriate stream for an I/O operation, <c>DataInputStream</c>s and
        <c>DataOutputStream</c>s normally are used for binary I/O. <c>Reader</c> and
        <c>Writer</c> streams normally are used for text I/O.
      </p>
    </principle>
    <p>
      The various subclasses of these root classes perform various specialized I/O operations.
      For example, <c>FileInputStream</c> and
      <c>FileOutputStream</c> are used for performing binary input and output on files.
      The <c>PrintStream</c> class contains methods for outputting various primitive data<mdash/>integers,
      floats, and so forth<mdash/>as text.
      The <c>System.out</c> stream,
      one of the most widely used output streams,
      is an object of this type.
      The <c>PrintWriter</c> class,
      which was introduced in JDK 1.1 contains the same methods as
      <c>PrintStream</c> but the methods are designed to support platform independence 
      and internationalized I/O<mdash/>that is, I/O that works in different languages and alphabets.
    </p>
    <p>
      The various methods defined in <c>PrintWriter</c> are designed 
      to output a particular type of primitive data (Fig.<nbsp/>11.4).
      As you would expect,
      there is both a <c>print()</c> and
      <c>println()</c> method for each kind of data that the programmer wants to output.
    </p>
    <figure xml:id="fig-writer">
      <caption>The <c>PrintWriter</c> class.</caption>
      <image width="50%" source="chptr11/writer.png"/>
    </figure> 
    <p>
      <xref ref="tab-streams">Table</xref> briefly describes Java's most commonly used input and output streams.
      In addition to the ones we've already mentioned,
      you are already familiar with methods from the <c>BufferedReader</c> and
      <c>File</c> classes,
      which were used in Chapter<nbsp/>4.
    </p>
     <table xml:id="tab-streams">
      <title>Description of some of Java's important stream classes.</title>
      <tabular>
        <row bottom="minor" left="minor">
          <cell><term>Class</term></cell>
          <cell><term>Description</term></cell>
        </row>
        <row>
          <cell><c>InputStream</c></cell>
          <cell>Abstract root class of all binary input streams</cell>
        </row>
        <row>
          <cell>
<c>FileInputStream</c></cell>
          <cell>Provides methods for reading bytes from a binary file </cell>
        </row>
        <row>
          <cell>
<c>FilterInputStream</c></cell>
          <cell>Provides methods required to filter data </cell>
        </row>
        <row>
          <cell>
<c>BufferedInputStream</c></cell>
          <cell>Provides input data buffering for reading large files </cell>
        </row>
        <row>
          <cell>
<c>ByteArrayInputStream</c></cell>
          <cell>Provides methods for reading an array as if it were a stream </cell>
        </row>
        <row>
          <cell>
<c>DataInputStream</c></cell>
          <cell>Provides methods for reading Java's primitive data types </cell>
        </row>
        <row>
          <cell>
<c>PipedInputStream</c></cell>
          <cell>Provides methods for reading piped data from another thread </cell>
        </row>
        <row>
          <cell>
<c>OutputStream</c></cell>
          <cell>Abstract root class of all binary output streams </cell>
        </row>
        <row>
          <cell>
<c>FileOutputStream</c></cell>
          <cell>Provides methods for writing bytes to a binary file </cell>
        </row>
        <row>
          <cell>
<c>FilterOutputStream</c></cell>
          <cell>Provides methods required to filter data </cell>
        </row>
        <row>
          <cell>
<c>BufferedOutputStream</c></cell>
          <cell>Provides output data buffering for writing large files </cell>
        </row>
        <row>
          <cell>
<c>ByteArrayOutputStream</c></cell>
          <cell>Provides methods for writing an array as if it were a stream </cell>
        </row>
        <row>
          <cell>
<c>DataOutputStream</c></cell>
          <cell>Provides methods for writing Java's primitive data types </cell>
        </row>
        <row>
          <cell>
<c>PipedOutputStream</c></cell>
          <cell>Provides methods for writing piped data to another thread </cell>
        </row>
        <row>
          <cell>
<c>PrintStream</c></cell>
          <cell>Provides methods for writing primitive data as text </cell>
        </row>
        <row>
          <cell>
<c>Reader</c></cell>
          <cell>Abstract root class for all text input streams </cell>
        </row>
        <row>
          <cell>
<c>BufferedReader</c></cell>
          <cell>Provides buffering for character input streams  </cell>
        </row>
        <row>
          <cell>
<c>CharArrayReader</c></cell>
          <cell>Provides input operations on <c>char</c> arrays  </cell>
        </row>
        <row>
          <cell>
<c>FileReader</c></cell>
          <cell>Provides methods for character input on files </cell>
        </row>
        <row>
          <cell>
<c>FilterReader</c></cell>
          <cell>Provides methods to filter character input </cell>
        </row>
        <row>
          <cell>
<c>StringReader</c></cell>
          <cell>Provides input operations on <c>String</c> s  </cell>
        </row>
        <row>
          <cell>
<c>Writer</c></cell>
          <cell>Abstract root class for all text output streams </cell>
        </row>
        <row>
          <cell>
<c>BufferedWriter</c></cell>
          <cell>Provides buffering for character output streams </cell>
        </row>
        <row>
          <cell>
<c>CharArrayWriter</c></cell>
          <cell>Provides output operations to <c>char</c> arrays </cell>
        </row>
        <row>
          <cell>
<c>FileWriter</c></cell>
          <cell>Provides methods for output to text files </cell>
        </row>
        <row>
          <cell>
<c>FilterWriter</c></cell>
          <cell>Provides methods to filter character output </cell>
        </row>
        <row>
          <cell>
<c>PrintWriter</c></cell>
          <cell>Provides methods for printing binary data as characters </cell>
        </row>
        <row bottom="minor">
          <cell>
<c>StringWriter</c></cell>
          <cell>Provides output operations to <c>String</c> s</cell>
        </row>
      </tabular>
    </table>
    <p>
      <term>Filtering</term>
          <idx><h>Filtering</h></idx>
      refers to performing operations on data while the data are being input or output.
      Methods in the <c>FilterInputStream</c> and <c>FilterReader</c> classes can be used to 
      filter binary and text data during input.
      Methods in the <c>FilterOutputStream</c> and <c>FilterWriter</c> can be used to filter output data.
      These classes serve as the root classes for various filtering subclasses.
      They can also be subclassed to perform customized data filtering.
    </p>
   <p>
      One type of filtering is <term>buffering</term>,
          <idx><h>buffering</h></idx>
      which is provided by several buffered streams,
      including <c>BufferedInputStream</c> and <c>BufferedReader</c>, for performing binary and text input,
      and <c>BufferedOutputStream</c> and <c>BufferedWriter</c>, for buffered output operations.
    </p>
    <p>  
      As was discussed in chapter<nbsp/>4,
      a <em>buffer</em> is a relatively large region of memory used to temporarily store data while they are being input or output.
      When buffering is used,
      a program will transfer a large number of bytes into the buffer from the relatively slow input 
      device and then transfer these to the program as each read operation is performed.
      The transfer from the buffer to the program's memory is very fast.
    </p>
    <p>
      Similarly, when buffering is used during output,
      data are transferred directly to the buffer and then written to the disk when the buffer 
      fills up or when the <c>flush()</c> method is called.
    </p>
    <principle>
      <title>PROGRAMMING TIP: Buffering</title>
      <p>
        Buffered streams can improve a program's overall efficiency by reducing the 
        amount of time it spends accessing relatively slow input or output devices.
      </p>
    </principle>
    <p>
      You can also define your own data filtering subclasses to perform  customized filtering.
      For example,
      suppose you want to add line numbers to a text editor's printed output.
      To perform this task,
      you could define a <c>FilterWriter</c> subclass and override its <c>write()</c> methods to 
      perform the desired filtering operation.
      Similarly, to remove the line numbers from such a file during input,
      you could define a <c>FilterReader</c> subclass.
      In that case,
      you would override its <c>read()</c> methods to suit your goals for the program.
    </p>
    <p>
      There are several classes that provide I/O-like operations on various internal memory structures. 
      <c>ByteArrayInputStream</c>, <c>ByteArrayOutputStream</c>, <c>CharArrayReader</c>, and 
      <c>CharArrayWriter</c> are four classes that take input from or send output to arrays in the program's memory.
      Methods in these classes can be useful for performing various operations on data during input or output.
      For example,
      suppose a program reads an entire line of integer data from a binary file into 
      a <c>ByteArray</c>. It might then transform the data by, say,
      computing the remainder modulo <c>N</c> of each value.
      The program now can read these transformed data by treating the byte array as an input stream.
      A similar example would apply for some kind of output transformation.
    </p>
    <p>
      The <c>StringReader</c> and <c>StringWriter</c> classes provide methods for 
      treating <c>String</c>s and <c>StringBuffer</c>s as I/O streams.
      These methods can be useful for performing certain data conversions.
    </p>
    <principle>
      <title>PROGRAMMING TIP: Integer/String Conversion</title>
      <p>
        An integer can be converted to a <c>String</c> by writing it to a <c>StringBuffer</c>, 
        which can then be output as an entire line of text. <c>StringReader</c> methods 
        can be used to read integer data from an ordinary <c>String</c> object.
      </p>
    </principle>
  </subsubsection>
</subsection>





<subsection xml:id="casestudy-readingand-writing-text-files"><!-- NOTE: this section is integrated from JavaJavaJava section 11.3 version 0b4e914 /-->
  <title>CASE STUDY: Reading and Writing Text Files</title>
  <introduction>
    <p>
      Let's write a GUI application that will be able to read and write data to and from a text file.
      To do this, we will need to develop a set of methods to perform I/O on text files.
    </p>
    <p>
      The GUI for this application will contain a <c>JTextArea</c>, where text  file data can be input and displayed,
      and a <c>JTextField</c>, where the user can enter the file's name.
      It will also contain two
      <c>JButton</c>s, one for reading a file into the <c>JTextArea</c>, and the other for 
      writing the data in the <c>JTextArea</c> into a file (<xref ref="fig-guitextio">Figure</xref>).
      Note that even this simple interface will let the user create new files and rename existing files.
    </p>
    <figure xml:id="fig-guitextio">
      <caption>The GUI design for a program that reads
      and writes text files.</caption>
      <image width="73%" source="chptr11/guitextio.png"/>
    </figure>
  </introduction>
  <subsubsection>
    <title>Text File Format</title>
    <p>
      A text file consists of a sequence of characters divided into zero or more lines and ending with a special
      <term>end-of-file character</term>.
          <idx><h>end-of-file character</h></idx>
       When you open a new file in a text editor,
      it contains zero lines and zero characters.
      After typing a single character,
      it would contain one character and one line.
      The following would be an example of a file with four lines of text:
    </p>
 <program language="java"><input>
one\ntwo\nthree\nfour\n\eof
 </input></program>
    <p>
      Note the use of the end-of-line character,
      <c>\n</c>, to mark the end of each line,
      and the use of the end-of-file character,
      <c>\eof</c>, to mark the end of the file.
      As we'll see,
      the I/O methods for text files use these special characters to control reading and writing loops.
      Thus, when the file is read by appropriate Java methods,
      such as the <c>BufferedReader.readLine()</c> and <c>BufferedReader.read()</c> methods,
      one or more characters will be read until either an end-of-line or end-of-file character is encountered.
      When a line of characters is written using <c>println()</c>, the end-of-line character is 
      appended to the characters themselves.
    </p>
  </subsubsection>
  <subsubsection>
    <title>Writing to a Text File</title>
      <p>
        Let's see how to write to a text file.
        In this program we write the entire contents of the <c>JTextArea</c> to the text file.
        In general, writing data to a file requires three steps:
      </p>
<algorithm>
<title>Writing to a file</title>
<program language="java"><input>
        Connect an output stream to the file.
        Write text data into the stream,possibly using a loop.
        Close the stream.
</input></program>
</algorithm>
      <p>
        As <xref ref="fig-systemout">Figure</xref> shows,
        connecting a stream to a file looks like doing a bit of plumbing.
        The first step is to connect an output stream to the file.
        The output stream serves as  a conduit between the program and a named file.
        The output stream opens the file and gets it ready to accept data from the program.
        If the file already exists,
        then opening the file will destroy any data it previously contained.
        If the file doesn't yet exist,
        then it will be created from scratch.
      </p>
      <p>
        Once the file is open, the next step is to write the text to the stream,
        which passes the text on to the file.
        This step might require a loop that outputs one line of data on each iteration.
        Finally, once all the data have been written to the file,
        the stream should be closed.
        This also has the effect of closing the file itself.
      </p>
      <principle>
        <title>EFFECTIVE DESIGN: Writing a File</title>
        <p>
          Writing data to a file requires a three-step algorithm: 
          (1) Connect an output stream to the file, (2) write the data,
          and (3) close the file.
        </p>
      </principle>
    </subsubsection>
    <subsubsection>
      <title>Code Reuse: Designing an Output Method</title>
      <p>
        Now let's see how these three steps are done in Java.
        Suppose the text we want to write is contained in a <c>JTextArea</c>. Thus,
        we want a method that will write the contents of a <c>JTextArea</c> to a named file.
      </p>
      <p>
        What output stream should we use for the task of writing a <c>String</c> to a named file?
        To decide this,
        we need to use the information in <xref ref="fig-streamhier">Figure</xref> and 
        <xref ref="tab-streams">Table</xref>.
        As we pointed out earlier, because we're writing a text file,
        we would use a <c>Writer</c> subclass.
        But which subclass should we use?
        One way to decide this is to consult the Java API documentation on 
        the <url href="https://docs.oracle.com/en/java/javase/18/docs/api/index.html" visual="">Oracle site</url>.
      </p>
      <p>
        For I/O operations you want to consult the classes in the <c>java.io</c> package.
        Ideally, we would like to be able to create an output stream to a named file,
        and we would like to be able to write a
        <c>String</c> to the file.
      </p>
      <p>
        One likely candidate is the <c>FileWriter</c> class (<xref ref="fig-filewriter">Figure</xref>).
        Its name and description (<xref ref="tab-streams">Table</xref>) suggest that it's designed for writing text files.
        And indeed it contains the kind of constructor we need<mdash/>that is,
        one that takes the file name as a parameter.
        Note that by taking a <c>boolean</c> parameter,
        the second constructor allows us to append data to a file rather than rewrite the entire file,
        which is the default case.
      </p>
      <p>
        However, <c>FileWriter</c> doesn't have a <c>write()</c> method.
        This doesn't necessarily mean that it doesn't contain such a method.
        It might have inherited one from its superclasses, <c>OutputStreamWriter</c> and <c>Writer</c>. Indeed,
        the <c>Writer</c> class contains a method, <c>write()</c>, whose signature suggests 
        that it is ideally suited for our task (<xref ref="fig-filewriter">Figure</xref>).
      </p>
      <figure xml:id="fig-filewriter">
        <caption>To find the right I/O method, it is sometimes
        necessary to search the Java class hierarchy. This is
        easy to do with the online documentation.</caption>
        <image width="60%" source="chptr11/filewriter.png"/>
      </figure>
      <p>
        Having decided on a <c>FileWriter</c> stream,
        the rest of the task of designing our method is simply a matter of using
        <c>FileWriter</c> methods in an appropriate way:
      </p>
 <program language="java"><input>
private void writeTextFile(JTextArea display, String fileName) {
    FileWriter outStream = new FileWriter(fileName);    // Create stream &amp; open file
    outStream.write(display.getText());                 //  Write the entire display text
    outStream.close();                                  //  Close the stream amp;
}
 </input></program>
      <p>
        We use the <c>FileWriter()</c> constructor to create an output stream to the file whose 
        name is stored in <c>fileName</c>. In this case,
        the task of writing data to the file is handled by a single <c>write()</c> statement,
        which writes the entire contents of the <c>JTextArea</c> in one operation.
      </p>
      <p>
        Finally, once we have finished writing the data,
        we <c>close()</c> the output stream.
        This also has the effect of closing the file.
        The overall effect of this method is that the text contained in
        <c>display</c> has been output to a file,
        named <c>fileName</c>, which is stored on the disk.
      </p>
      <principle>
        <title>PROGRAMMING TIP: Closing a File</title>
        <p>
          Even though Java will close any apen files and streams when a program terminates normally,
          it is good programming practice to close the file yourself with a <c>close()</c> statement.
          It also reduces the chances of damaging the file if the program terminates abnormally.
        </p>
      </principle>
      <p>
        Because so many different things can go wrong during an I/O operation,
        most I/O operations generate some kind of
        <em>checked exception</em>.
        Therefore, it is necessary to embed the I/O operations within a <c>try/catch</c> statement.
        In this example,
        the <c>FileWriter()</c> constructor,
        the <c>write()</c> method,
        and the <c>close()</c> method may each throw an <c>IOException</c>. Therefore,
        the entire body of this method should be embedded within a <c>try/catch</c> block that catches the
        <c>IOException</c>(<xref ref="fig-writetextmethod">Listing</xref>).
      </p>
<listing xml:id="fig-writetextmethod">
<caption>A method to write a text file.</caption>
        
 <program language="java"><input>
private void writeTextFile(JTextArea display, String fileName) {
  try {
      FileWriter outStream =  new FileWriter (fileName);
      outStream.write (display.getText());
      outStream.close();
  } catch (IOException e) {
      display.setText("IOERROR: " + e.getMessage() + "\n");
      e.printStackTrace();
  }
} // writeTextFile()
 </input></program>
  </listing>
  </subsubsection>
  <subsubsection xml:id="text-output">
    <title>Code Reuse: Designing Text File Output</title>
    <p>
      The <c>writeTextFile()</c> method provides a simple example of how to write data to a text file.
      More importantly,
      its development illustrates the kinds of choices necessary to design effective I/O methods.
      Two important design questions we asked and answered were
      <ul>
        <li>
          <p>
            What methods do we need to perform the desired task?
          </p>
        </li>
        <li>
          <p>
            What streams contain the desired methods?
          </p>
        </li>
      </ul>
    </p>
    <p>
      As in so many other examples we've considered,  designing a method to perform a task 
      is often a matter of finding the appropriate methods in the Java class hierarchy.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Code Reuse</title>
      <p>
        Developing effective I/O routines is primarily a matter of choosing the right library methods.
        Start by asking yourself,
        <q>What methods do I need?</q>
        and then find a stream class that contains the appropriate methods.
      </p>
    </principle>
    <p>
      As you might expect,
      there is more than one way to write data to a text file.
      Suppose we decided that writing text to a file is like printing data to <c>System.out</c>. 
      And suppose we chose to use a <c>PrintWriter</c> object as our first candidate for an output stream
      (<xref ref="fig-printwriter">Figure</xref>).
    </p>
    <figure xml:id="fig-printwriter">
      <caption>The <c>PrintWriter</c> class.</caption>
      <image width="50%" source="chptr11/printwriter.png"/>
    </figure>
    <p>    
      This class contains a wide range of <c>print()</c> 
      methods for writing different types of data as text.
      So it has exactly the kind of method we need: <c>print(String)</c>. However,
      this stream does not contain a constructor method that allows us to create a stream from the name of a file.
      Its constructors require either a
      <c>Writer</c> object or an <c>OutputStream</c> object.
    </p>
    <figure xml:id="fig-fileoutput">
      <caption>The <c>FileOutputStream</c> class.</caption>
      <image width="73%" source="chptr11/fileoutput.png"/>
    </figure>    
    <p>
      This means that we can use a <c>PrintWriter</c> to print to a file,
      but only if we can first construct either an <c>OutputStream</c> or a <c>Writer</c> object to the file.
      Fortunately,
      the <c>FileOutputStream</c> class (<xref ref="fig-fileoutput">Figure</xref>) has just the constructors we want.
      We now have an alternative way of coding the <c>writeTextFile()</c> method,
      this time using a combination of <c>PrintWriter</c> and
      <c>FileOutputStream</c>:
    </p>
    <algorithm>
    <title>Writing to a textfile</title>
 <program language="java"><input>
                                    
PrintWriter outStream =                  //  Create an output stream
    new PrintWriter(new FileOutputStream(fileName)); //  and open the file
outStream.print ( display.getText() );               // Write the text
outStream.close();                                   // Close the stream
 </input></program>                     
</algorithm>
    <p>
      Note how the output stream is created in this case.
      First, we create a <c>FileOutputStream</c> using the file name as its argument.
      Then we create a <c>PrintWriter</c> using the <c>FileOutputStream</c> as its argument.
      The reason we can do this is  because the <c>PrintWriter()</c> constructor takes a
      <c>FileOutputStream</c> parameter.
      This is what makes the connection possible.
    </p>
    <p>
      To use the plumbing analogy again,
      this is like connecting two sections of pipe between the program and the file.
      The data will flow from the program through <c>PrintWriter</c>, through the <c>OutputStream</c>, to the file.
      Of course, you can't just arbitrarily connect one stream to another.
      They have to <q>fit together,</q>
      which means that their parameters have to match.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Stream/Stream Connections</title>
      <p>
        Two different kinds of streams can be connected if a constructor for one stream 
        takes the second kind of stream as a parameter.
        This is often an effective way to create the kind of object you need to perform an I/O task.
      </p>
    </principle>
    <p>
      The important lesson here is that we found what we wanted by searching through the <c>java.io.*</c> hierarchy.
      This same approach can be used to help you to design I/O methods for other tasks.
    </p>
    <exercises>
    <title>Self-Study Exercise</title>
    <exercise label="printwriter">
    <title>PrintWriter</title>
    <statement>
          <p>
            Which of the following code segments make proper use of
            <c>PrintWriter</c> (<xref ref="fig-printwriter">Figure</xref>) 
            and a <c>FileWriter</c> (<xref ref="fig-filewriter">Figure</xref>) 
            to perform output to a textfile.
          </p>
    </statement>
    <choices>
            <choice correct="no">
            <statement>
                <program language="java"><input>
                PrintWriter outStream =                        
                    new FileWriter(new FileWriter(fileName)); 
                outStream.print (display.getText());           
                outStream.close();                             
                </input></program>
            </statement>
                <feedback>
                    <p>
                      There is no <c>FileWriter(OutputStream)</c> constructor.
                    </p>
                </feedback>
            </choice>
            <choice correct="no">
            <statement>
                <program language="java"><input>
                FileWriter outStream =                        
                    new FileWriter(new PrintWriter(fileName)); 
                outStream.print (display.getText());           
                outStream.close();                             
                </input></program>
            </statement>
                <feedback>
                  <p>There is no <c>PrintWriter(fileName:String)</c> constructor.
                  </p>
                </feedback>
            </choice>
            <choice correct="yes">
            <statement>
                <program language="java"><input>
                PrintWriter outStream =                        
                    new PrintWriter(new FileWriter(fileName)); 
                outStream.print (display.getText());           
                outStream.close();                             
                </input></program>
            </statement>
                <feedback>
                <p>
                  Yes,  the <c>FileWriter(filename: String)</c> constructor will
                  create an output stream for <c>PrintWriter</c>.
                </p>
                </feedback>
            </choice>
            <choice correct="no">
            <statement>
                 <program language="java"><input>
                FileWriter outStream =                        
                    new PrintWriter(new FileWriter(fileName)); 
                outStream.print (display.getText());           
                outStream.close();                             
                </input></program>
            </statement>
                <feedback>
                    <p><c>PrintWriter</c> is not a subclass of <c>FileWriter</c>.</p>
                </feedback>
            </choice>
        </choices>
    <solution>
            <p>
          Because <c>FileWriter</c> contains a constructor that takes a file name 
          argument, <c>FileWriter(String)</c>, it can be used with <c>PrintWriter</c> to 
          perform output to a text file:
          </p>
<program language="java"><input>
PrintWriter outStream =                        //  Create output stream
    new PrintWriter(new FileWriter(fileName)); // Open file
outStream.print (display.getText());           // Print the text
outStream.close();                             // Close output stream
</input></program>
    </solution>
    </exercise>
    </exercises>
 </subsubsection>
  <subsubsection xml:id="sec-reading-files">
    <title>Reading from a Text File</title>
    <p>
      Let's now look at the problem of inputting data from an existing text file,
      a common operation that occurs whenever your email program opens an email message 
      or your word processor opens a document.
      In general, there are three steps to reading data from a file:
    </p>
    <ol>
      <li><p>Connect an input stream to the file.</p></li>
      <li><p>Read the text data using a loop.</p></li>
      <li><p>Close the stream.</p></li>
    </ol>
    <figure xml:id="fig-readfromstream">
      <caption>A stream serves as a pipe through which
      data flow.</caption>
      <image width="73%" source="chptr11/filestream.png"/>
    </figure>
    <p>
      As <xref ref="fig-readfromstream">Figure</xref> shows,
      the input stream serves as a kind of pipe between the file and the
      program.
      The first step is to connect an input stream to the file.
      Of course, in order to read a file, the file must exist.
      The input stream serves as a conduit between the program and the named file.
      It opens the file and gets it ready for reading.
      Once the file is open, the next step is to read the file's data.
      This will usually require a loop that reads data until the end of the file is reached.
      Finally, once all the data are read,
      the stream should be closed.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Reading Data</title>
      <p>
        Reading data from a file requires a three-step algorithm: (1) Connect an input stream to the file, (2) read the data,
        and (3) close the file.
      </p>
    </principle>
    <p>
      Now let's see how these three steps are done in Java.
      Suppose that we want to put the file's data into a <c>JTextArea</c>. Thus,
      we want a method that will be given the name of a file and a reference to a <c>JTextArea</c>, and 
      it will read the data from the file into the <c>JTextArea</c>.
    </p>
    <p>
      What input stream should we use for this task?
      Here again we  need to use the information in <xref ref="fig-streamhier">Figure</xref> and
      <xref ref="tab-streams">Table</xref>.
      Because we're reading a text file,
      we should use a <c>Reader</c> subclass.
      A good candidate is the <c>FileReader</c>, whose name and description suggest that it might contain useful methods.
    </p>
    <p>
      What methods do we need?
      As in the previous example,
      we need a constructor method that connects an input stream to a file when the constructor is given the  name of the file.
      And, ideally,
      we'd like to have a method that will read one line at a time from the text file.
    </p>
    <figure xml:id="fig-filereader">
      <caption><c>FileReader</c>'s superclasses contain
      <c>read()</c> methods but no <c>readLine()</c> methods.</caption>
      <image width="60%" source="chptr11/filereader.png"/>
    </figure>
    <p>
      The <c>FileReader</c> class (<xref ref="fig-filereader">Figure</xref>) has the right kind of constructor.
      However, it contains no <c>readLine()</c> methods itself,
      which would be necessary for our purposes.
      Searching upward through its superclasses,
      we find that InputStreamReader , its immediate parent class,
      has a method that reads <c>int</c>s:
    </p>
 <program language="java"><input>
public int read() throws IOException();
 </input></program>
    <p>
      As shown in <xref ref="fig-filereader">Figure</xref>,
      this <c>read()</c> method is an override of the <c>read()</c> method defined in the <c>Reader</c> class,
      the root class for text file input streams.
      Thus, there are no <c>readLine()</c> methods in the <c>Reader</c> branch of the hierarchy.
      We have to look elsewhere for an appropriate class.
    </p>
    <p>
      One class that does contain a <c>readLine()</c> method is <c>BufferedReader</c>(Fig.
      <xref ref="fig-filereader"></xref>).
      Can we somehow use it?
      Fortunately,
      the answer is yes. <c>BufferedReader</c>'s constructor takes a <c>Reader</c> object as a parameter.
      But a <c>FileReader</c><em>is</em>
      a <c>Reader</c><mdash/>that is,
      it is a descendant of the <c>Reader</c> class.
      So, to use our plumbing analogy again,
      to build an input stream to the file,
      we can join a <c>BufferedReader</c> and a <c>FileReader</c>
    </p>
 <program language="java"><input>
BufferedReader inStream
    = new BufferedReader(new FileReader(fileName));
 </input></program>
    <p>
      Given this sort of connection to the file,
      the program can use <c>BufferedReader.readLine()</c> to read one line at a time from the file.
    </p>
    <p>
      So, we have found a method that reads one line at a time.
      Now we need an algorithm that will read the entire file.
      Of course, this will involve a loop,
      and the key will be to make sure we get the loop's termination condition correct.
    </p>
    <p>
      An important fact about <c>readLine()</c> is that it will return <c>null</c> as its value when it reaches the end of the file.
      Recall that text files have a special end-of-file character.
      When <c>readLine()</c> encounters this character,
      it will return
<c>null</c>. Therefore,
      we can specify the following <c>while</c> loop:
    </p>
<algorithm>
<title>Reading a text file</title>
 <program language="java"><input>
String line = inStream.readLine();
while (line != null) {
    display.append(line + "\n");
    line = inStream.readLine();
}
 </input></program>
 </algorithm>
    <p>
      We begin outside the loop by attempting to read a line from the file.
      If the file happens to be empty
      (which it might be),
      then <c>line</c> will be set to <c>null</c>; otherwise it will contain the <c>String</c> that was read.
      In this case,
      we append the line to a <c>JTextArea</c>. Note that <c>readLine()</c><em>does not</em>
      return the end-of-line character with its return value.
      That's why we add a <c>\n</c> before we append the line to the <c>JTextArea</c>.
    </p>
    <principle>
      <title>PROGRAMMING TIP: End of Line</title>
      <p>
        Remember that <c>readLine()</c> does not return the end-of-line character as part of the text it returns.
        If you want to print the text on separate lines,
        you must append <m>\backslash</m>n.
      </p>
    </principle>
    <p>
      The last statement in the body of the loop attempts to read the next line from the input stream.
      If the end of file has been reached,
      this attempt will return <c>null</c> and the loop will terminate.
      Otherwise, the loop will continue reading and displaying lines until the end of file is reached.
      Taken together,
      these various design decisions lead to the definition for <c>readTextFile()</c> 
      shown in <xref ref="fig-readtextmethod">Listing</xref>.
    </p>
    <listing xml:id="fig-readtextmethod">
      <caption>A method for reading a text file.</caption>
 <program language="java"><input>
private void readTextFile(JTextArea display,
                                    String fileName) {
 try {
  BufferedReader inStream  // Create and open the stream
      = new BufferedReader (new FileReader(fileName));
  String line = inStream.readLine(); // Read one line
  while (line != null) {            // While more text
      display.append(line + "\n");  // Display a line
      line = inStream.readLine();   // Read next line
  }
   inStream.close();                // Close the stream
  } catch (FileNotFoundException e) {
   display.setText("IOERROR: "+ fileName +" NOT found\n");
   e.printStackTrace();
  } catch ( IOException e ) {
   display.setText("IOERROR: " + e.getMessage() + "\n");
   e.printStackTrace();
  }
} // readTextFile()
 </input></program>
    </listing>
    <p>
      Note that we must catch both the <c>IOException</c>, thrown by <c>readLine()</c> 
      and <c>close()</c>, and the <c>FileNotFoundException</c>, thrown by the <c>FileReader()</c> constructor.
      It's important to see that the read loop has the following form:
    </p>
 <program language="java"><input>
try to read one line of data  and store it in line     // Loop initializer
while ( line is not null ) {                           // Loop entry condition
    process the data
    try to read one line of data and store it in line  // Loop updater
}
 </input></program>
    <p>
      When it attempts to read the <em>end-of-file</em>
      character, <c>readLine()</c> will return <c>null</c>.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Reading Text</title>
      <p>
        In reading text files,
        the <c>readLine()</c> method will return <c>null</c> when it tries to read the end-of-file character.
        This provides a convenient way of testing for the end of file.
      </p>
    </principle>
    <principle>
      <title>EFFECTIVE DESIGN: Reading an Empty File</title>
      <p>
        Loops for reading text files are designed to work even if the file is empty.
        Therefore, the loop should attempt to read a line <term>before</term>
        testing the loop-entry condition.
        If the initial read returns <c>null</c>, that means the file is empty and the loop body will be skipped.
      </p>
    </principle>

  <exercises>
  <title>Self-Study Exercises</title>
          <exercise label="read-file-algorithm" adaptive="yes">
            <title>Read Loop</title>
            <statement>
                <p>Organize the following blocks into a correctly formed read loop.
                </p>
            </statement>
            <blocks>
               <block order="1">
                    <c>String line = inStream.readLine();</c>
                </block>
               <block order="2">
                    <c>while (line != null)</c>
                </block>
                <block order="3">
                   <c>{</c>
                </block>       
                <block order="4">
                   <c>display.append(line + "\n");</c>
                </block> 
                <block order="5">
                   <c>line = inStream.readLine();</c>
                </block>                    
                <block order="6">
                   <c>}</c>
                </block>                        
            </blocks>
          <solution>
          <program language="java"><input>
              String line = inStream.readLine(); // Read one line
              while (line != null)               // While more text
              { 
                display.append(line + "\n");  // Display a line
                line = inStream.readLine();   // Read next line
              }
          </input></program>
          </solution>  
         </exercise>
    </exercises>
 </subsubsection>
  <subsubsection xml:id="text-file-input">
    <title>Code Reuse: Designing Text File Input</title>
    <p>
      Our last example used <c>BufferedReader.readLine()</c> to read an entire line from the file in one operation.
      But this isn't the only way to do things.
      For example,
      we could use the <c>FileReader</c> stream directly if we were willing to do without the <c>readLine()</c> method.
      Let's design an algorithm that works in this case.
    </p>
    <p>
      As we saw earlier,
      if you use a <c>FileReader</c> stream,
      then you must use the <c>InputStreamReader.read()</c> method.
      This method reads bytes from an input stream and translates them into Java Unicode characters.
      The <c>read()</c> method,
      for example,
      returns a single Unicode character as an <c>int</c>:
    </p>
 <program language="java"><input>
public int read() throws IOException();
 </input></program>
    <p>
      Of course, we can always convert this to a <c>char</c> and concatenate it to a <c>JTextArea</c>, 
      as the following algorithm illustrates:
    </p>
 <program language="java"><input>
int ch = inStream.read(); // Init: Try to read a character
while (ch != -1) { // Entry-condition: while more chars
    display.append((char)ch + ""); // Append the character
    ch = inStream.read();   // Updater: try to read
}
 </input></program>
    <p>
      Although the details are different,
      the structure of this loop is the same as if we were reading one line at a time.
    </p>
    <p>
      The loop variable in this case is an <c>int</c> because <c>InputStreamReader.read()</c> 
      returns the next character as an <c>int</c>, or it returns <m>-1</m> if it encounters 
      the <c>end-of-file</c> character.
      Because <c>ch</c> is an <c>int</c>, we must convert it to a
      <c>char</c> and then to a <c>String</c> in order to <c>append()</c> it to the display.
    </p>
    <p>
      A loop to read data from a file has the following basic form:
    </p>
<algorithm>
<title>Read data loop</title>
 <program language="java"><input>
try to read data into a variable      // Initializer
while ( read was successful ) {       // Entry condition
    process the data
    try to read data into a variable // Updater
}
 </input></program>
 </algorithm>
    <principle>
      <title>EFFECTIVE DESIGN: Read Loop Structure</title>
      <p>
        The <c>read()</c> and
        <c>readLine()</c> methods have different ways to indicate when a read attempt fails.
        These differences affect how the loop-entry condition is specified,
        but the structure of the read loop is the same.
      </p>
    </principle>
    <principle>
      <title>PROGRAMMING TIP: Read Versus Readline</title>
      <p>
        Unless it is necessary to manipulate each character in the text file,
        reading a line at a time is more efficient and, therefore,
        preferable.
      </p>
    </principle>
    <p>
      It is worth noting again the point we made earlier: Designing effective I/O routines is 
      largely a matter of searching the
      <c>java.io</c> package for appropriate classes and methods.
      The methods we've developed can serve as suitable models for a wide variety of text I/O tasks,
      but if you find that they aren't suitable for a particular task,
      you can design your own method.
      Just think about what it is you want the program to accomplish,
      then find the stream classes that contain methods you can use to perform the desired task.
      Basic  reading and writing algorithms will be pretty much the same no matter which particular read or write method you use.
    </p>
    <exercises>
    <title>Self-Study Exercise</title>
         <exercise label="read-file-by-char" adaptive="yes">
            <title>Read Loop Characters</title>
            <statement>
                <p>Organize the following blocks into a correctly formed loop that
                will read a file character-by-character.
                </p>
            </statement>
            <blocks>
               <block order="1">
                    <c>int ch = inStream.read(); </c>
                </block>
               <block order="2">
                    <c>while (ch != -1)</c>
                </block>
                <block order="3">
                   <c>{</c>
                </block>       
                <block order="4">
                   <c>  display.append((char)ch + "");</c>
                </block> 
                <block order="5">
                   <c>  ch = inStream.read(); </c>
                </block>                    
                <block order="6">
                   <c>}</c>
                </block>                        
            </blocks>
          <solution>
           <program language="java"><input>
            int ch = inStream.read(); // Init: Try to read a character
            while (ch != -1) 
            {                                  // Entry-condition: while more chars
                display.append((char)ch + ""); // Append the character
                ch = inStream.read();   // Updater: try to read
            }
          </input></program>
          </solution>  
         </exercise>
    </exercises>
  </subsubsection>
  <subsubsection>
    <title>The <c>TextIO</c>Application</title>
    <p>
      Given the text I/O methods we wrote in the previous sections,
      we can now specify the overall design of our <c>TextIO</c> class 
      (<xref ref="fig-textiouml">Figure</xref>).
      In order to complete this application,
      we need only set up its GUI and write its <c>actionPerformed()</c> method.
    </p>
    <figure xml:id="fig-textiouml">
      <caption>The <c>TextIO</c> class.</caption>
      <image width="60%" source="chptr11/textiouml.png"/>
    </figure>
    <p>
      Setting up the GUI for this application is straightforward.
      <xref ref="fig-textioapp">Figure</xref> shows how the finished product will look.
      The code is given in <xref ref="fig-textioclass">Listing</xref>.
      Pay particular attention to the <c>actionPerformed()</c> method,
      which uses the methods we defined in the previous section.
    </p>
    <figure xml:id="fig-textioapp">
      <caption>An application that performs simple text I/O.</caption>
      <image width="60%" source="chptr11/textioapp.png"/>
    </figure>

    <listing xml:id="fig-textioclass">
      <caption>The <c>TextIO</c> class.</caption>
      
 <program language="java"><input>
import javax.swing.*;         // Swing components
import java.awt.*;
import java.io.*;
import java.awt.event.*;

public class TextIO extends JFrame implements ActionListener {
 private JTextArea display = new JTextArea();
 private JButton read = new JButton("Read From File"),
                 write = new JButton("Write to File");
 private JTextField nameField = new JTextField(20);
 private JLabel prompt = new JLabel("Filename:",JLabel.RIGHT);
 private JPanel commands = new JPanel();

 public TextIO() {                     // Constructor
  super("TextIO Demo");             // Set window title
  read.addActionListener(this);
  write.addActionListener(this);
  commands.setLayout( new GridLayout(2,2,1,1));  // Control panel
  commands.add(prompt);
  commands.add(nameField);
  commands.add(read);
  commands.add(write);
  display.setLineWrap(true);
  this.getContentPane().setLayout(new BorderLayout());
  this.getContentPane().add("North", commands);
  this.getContentPane().add( new JScrollPane(display));
  this.getContentPane().add("Center", display);
 } // TextIO

 private void writeTextFile(JTextArea display, String fileName) {
   try {
      FileWriter outStream =  new FileWriter (fileName);
      outStream.write (display.getText());
      outStream.close();
  } catch (IOException e) {
      display.setText("IOERROR: " + e.getMessage() + "\n");
      e.printStackTrace();
  }
 } // writeTextFile()

 private void readTextFile(JTextArea display, String fileName) {
   try {
      BufferedReader inStream  // Create and open the stream
          = new BufferedReader (new FileReader(fileName));
      String line = inStream.readLine(); // Read one line
      while (line != null) {         // While more text
        display.append(line + "\n"); // Display a line
        line = inStream.readLine();      // Read next line
      }
        inStream.close();        // Close the stream
      } catch (FileNotFoundException e) {
        display.setText("IOERROR: "+ fileName +" NOT found\n");
        e.printStackTrace();
      } catch (IOException e) {
        display.setText("IOERROR: " + e.getMessage() + "\n");
        e.printStackTrace();
      }
 } // readTextFile

public void actionPerformed(ActionEvent evt) {
    String fileName = nameField.getText();
    if (evt.getSource()  == read) {
        display.setText("");
        readTextFile(display, fileName);
    }
    else writeTextFile(display, fileName);
  } // actionPerformed()

  public static void main(String args[]) {
    TextIO tio = new TextIO();
    tio.setSize(400, 200);
    tio.setVisible(true);
    tio.addWindowListener(new WindowAdapter() {
        public void windowClosing(WindowEvent e) {
            System.exit(0); // Quit the application
        }
    });
  } // main()
} //TextIO
   </input></program>
    </listing>
  <activity>
<title>TextIO application</title>
<statement>
<p>Try running the <c>TextIO</c> program in <url href="https://replit.com/@RalphMorelli/TextIO#Main.java">replit</url>. 
As an input file you can use <c>Testfile.txt</c>, which is provided. Try making some edits and the saving (i.e., writing) and 
then reopening the file to see that your edits are saved.
<!-- <interactive iframe="iframe/repl-textio.html" width="95%" aspect="1:1"/> -->
</p>
</statement>
  </activity>
  </subsubsection>
</subsection>





  </section>

