<section xml:id="basic-expressions">
        <title>Basic Types and Expressions</title>
    <p>
        <firstterm>Expressions</firstterm> are the most basic syntactic building blocks of a computer program. Think of an expression as a simple question that you're asking of the computer. The answer you get back from the computer is called a <firstterm>value</firstterm>, and the process of determining the value for an expression is called <firstterm>evaluation</firstterm>. </p>
    
    <p>You've worked with expressions before if you've ever used a calculator. For instance, an expression you might feed in to a calculator is <c>2 + 3</c>. The answer the calculator would give you back is <c>5</c>. In this case, the calculator read the expression <c>2 + 3</c>, evaluated the expression by performing addition, and returned the resulting value <c>5</c> back to you. This is similar to how expressions are used in programming languages, with the difference being that there are many more types of expressions in Java than are likely supported by your calculator!
    </p>
    <subsection><title>Literal Expressions and Data Types</title>
    <p>
        Literal expressions are the most simple expressions in Java. A <firstterm>literal expression</firstterm> is one that directly represents the value it evaluates to. For instance, the expression <c>5</c> evaluates to, wait for it...,  <c>5</c>.  Other examples of literal expressions are <c>21</c>, <c>90000</c> (note, no commas), or <c>0</c>.
    </p>
    
    <p>
      One catch is that there are more than one type of numeric value in Java! The type of a value is called a <firstterm>data type</firstterm> (frequently abbreviated to <firstterm>type</firstterm>). Types are simply a collection of possible values that a given value is restricted to. For example, <c>5</c> is an example of what is called an <c>integer</c> (shortened to <c>int</c> in Java). There are some constraints on the size of an integer (the minimum value is <c>âˆ’2147483648</c> or -2<superscript>31</superscript> and the maximum value is 2<superscript>31</superscript>-1 or <c>2147483647</c>). Considering this rule, the expression 2147483648 would be a syntax error, since it is too large to be an <c>int</c>. Note that integer values also have no fractional component. For instance, 0.5 is not a legal integer value either.
    </p>
    <p>There are also other integer types with different ranges of values. For instance, the type <c>long</c> has a range of -2<superscript>63</superscript> to -2<superscript>63</superscript> This type of value is often used when a number is too large to be represented as an <c>int</c>. Note that you can specify you want to create a long value using a special syntax for the literal expression. For instance, <c>46L</c> is a legal expression that evaluates to the <c>long</c> integer value 46 and <c>2147483648L</c> is also legal (where 2147483648 was not). 
    </p>
    </subsection>
    <subsection><title>Floating Point Values</title>
    <p>
        <c>9.2</c> is an example of a floating point value. These are values with a decimal component. Like integer values, there is more than one floating point type in Java (single and double precision). The difference between these types is the precision (essentially the number of significant digits) to to which a value will approximate some real number. By default, the literal expressions you type in that contain a decimal point will be double precision (shortened to <c>double</c>).
    </p>
    
    <p>
        Internally, these values are stored in the same way you would use scientific notation. Each floating point value consists of two components: an exponent and a mantissa. The value is determined by multiplying the mantissa by 10 to the power of the exponent. In addition to writing out floating point literals with a decimal point, you can also format them by identifying these two components explicitly. Literal values that use the scientific notation format place a letter E between the mantissa and the exponent. For instance, <c>5E3</c> is the same as <c>5000.0</c>.
    </p>
    </subsection>
    <subsection><title>Casting</title>
    <p>Values can also be converted to new values with a different data type by using a <firstterm>casting</firstterm> expression. This can be important in situations when it is important to use the advantages or avoid the disadvantages of a particular data type. To cast a value to a new data type, type the name of the data type, surrounded by parentheses, immediately before the expression you want to convert. For example, <c>(double)8</c> evaluates to the value <c>8.0</c></p>
    <p>Casting a value produces a value that is different from the one you started with, and it may be impossible to cast it back to the original value, depending on the types you're casting between. For instance, if you cast an <c>int</c> to a <c>double</c>, such as we did in the last example, you're expanding the values that can be represented by introducing the fractional component. But if you cast a <c>double</c> to an int, such as in the following expression: <c>(int)5.8</c>, you're narrowing the possible values that can be used. In this case, when casting a <c>double</c> to an <c>int</c>, the fractional component is <firstterm>truncated</firstterm>, yielding the value <c>5</c>. Note that it is not rounded up to the nearest integer.
    </p>
    </subsection>
</section>

