
<section xml:id="arrays">
    
        <title>Arrays</title>
    

    <p>
Strings are a collection of characters, but we haven't yet seen a way to handle a collection of other types of values. Arrays allow Java programmers to create collections of values of an arbitrary type.
    </p>

    <subsection>
        <title>The Array Type</title>
        <p> Arrays themselves are a type of data, but are parameterized by the type of data they hold (that is to say, there are many 'array types' and each is distinguished by the type of data held by an array of that type). Values in an array can have any type, but they must all have the <em>same type</em> as each other.
        </p>
        <p> The syntax for an array type has two parts: the type of data held by the array, and a pair of square brackets indicating an array type. For example, the type <em>array of integers</em> would be written: <c>int[]</c>
        </p>
        <p> A variable named <c>arr</c> that could hold an array of integers is defined as follows:
            <program language="java"><input>int[] arr;</input></program>
        </p>
    </subsection>
    <subsection>
        <title>Creating Array Values</title>
        <p>Like strings, arrays are object types. Thus, variables with array types can be null:

          <program language="java"><input>int[] arr = null;</input></program>

            We also create array objects with the <c>new</c> keyword, although the syntax is a little different than it is for other constructor calls. Square brackets are used instead of parentheses and the size of the array is provided within the square brackets. The size is constant and cannot be changed over the lifetime of the array object you create. For example, the following code initializes <c>arr</c> to contain an array of 5 integers:

          <program language="java"><input>int[] arr = new int[5];</input></program>

            Each of the integers in the array <c>arr</c> are initialized to zero in the previous example. However, we can initialize them to hold arbitrary values by enumerating those values within curly braces instead of providing the length of the array. For example, the following code initializes <c>arr</c> to hold the values 1 through 10:


          <program language="java"><input>int[] arr = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};</input></program>
        </p>
    </subsection>
    <subsection>
        <title>Operations on Arrays</title>
        <subsubsection>
            <title>Length of an Array</title>
            <p>
                The first operation to consider on arrays is how to determine the length of an array. This is similar to determining the length of a string, but instead of calling a method, the <c>length</c> field is accessed instead. For example, assuming the most recent definition of <c>arr</c>, the following expression will evaluate to <c>10</c>:

          <program language="java"><input>
                arr.length
          </input></program>

                It is a very common mistake to include parentheses at the end of <c>length</c> for an array or to leave off parentheses at the end of <c>length</c> for a string because of this unfortunate inconsistency.
            </p>
        </subsubsection>
        <subsubsection>
            <title>Accessing an Array</title>
            <p> The most important operation on arrays is retrieving a value from an array. This is very similar to the <c>charAt</c> instance method we used with strings, but instead of calling a method, square brackets following an array value indicate the index of the value to be retrieved. For example, assuming the most recent definition of <c>arr</c>, the following expression will evaluate to <c>1</c>:

<program language="java"><input>arr[0]</input></program>

                Note that the first index of an array is 0, just as with strings.</p>
        </subsubsection>
        <subsubsection>
            <title>Modifying an Array</title>
            <p>Though the size of an array can't change, the values it contains can. Think of an indexed array (an array value with an index following it in square brackets) as any other variable. In addition to evaluating it like a variable expression (above), we can also use it in an assignment statement. For example, the following statement will assign the value <c>100</c> to the first position in the array <c>arr</c>:
<program language="java"><input>arr[0] = 100;</input></program>
                Following this assignment statement, the following expression will evaluate to <c>100</c>:

          <program language="java"><input>arr[0]</input></program>
                      </p>
        </subsubsection>
        <subsubsection>
            <title>Iterating through an Array</title>
            <p>
                For loops are a very convenient way to process each element of an array. For example, the following code initializes <c>arr</c> to the values 1 through 10, but can be easily modified to have any upper limit:

<program language="java"><input>
int size = 10;
int[] arr = new int[size];
for(int i=0; i&lt;arr.length; i++) {
    arr[i] = (i + 1);
}
</input></program>
        </p>
        </subsubsection>
    </subsection>
    
    
    
<subsection xml:id="for-each">
    
        <title>For-Each Loops</title>
    

<p>While loops used to iterate over an array often looked very similar, so for loops were introduced as a more concise way to handle the task. <term>For-Each Loops</term> were introduced in Java 5 as an even more concise way to deal with these tasks, and are preferred whenever the programmer intends to iterate over each element of an array <em>sequentially</em> (that is, starting with the first, then the second, and so on until the last element).
</p>

    <p>
A for-each loop eliminates the index variable <c>i</c> entirely. Instead, the programmer must define a new variable that will hold a single element of the array through each iteration of the loop. The same keyword <c>for</c> is used. Following the definition of this new variable, the programmer must include a colon (<c>:</c>) and then an expression yielding the array to be iterated over (usually just a variable reference).
    </p>


<example>
    <p>Consider the following array of Strings:</p>

<program language="java"><input>
String[] names = new String[] { "Jane", "Billy", "Susie" };
</input></program>

<p>A for loop could be used to print each name out:</p>

<program language="java"><input>
for(int i=0; i &lt; names.length; i++) {
    System.out.println(names[i]);
}
</input></program>

<p>The following for-each loop will perform the exact same task with a little less code, and is a little easier to read and understand:
</p>

<program language="java"><input>
for(String name : names) {
    System.out.println(name);
}
</input></program>

<p>This makes it easier to use arbitrary expressions that yield arrays. For example, the following code snippet also does the same thing as the previous two, but doesn't require the initial variable definition:
</p>

<program language="java"><input>
for(String name : new String[] { "Jane", "Billy", "Susie" }) {
    System.out.println(name);
}
</input></program>
</example>
</subsection>
</section>
