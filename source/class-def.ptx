
<section xml:id="ex.classes">
    <title>Basic Class Definitions</title>

    <p>Every object type has a class definition associated with it, but classes in Java are also used for other special purposes, such as creating a collection of static methods (for example, the Math class) or for creating a Java application. Classes are the primary definition you'll find in a typical Java source-code file. These files end with the extension .java (rather than .txt or .jsh). 
    </p>
    <subsection>
        <title>Class and Static Method Definition Syntax</title>
        <p>A class definition begins with the keyword <c>class</c>, followed by the class name, and then a pair of curly braces. For example, here is a very simple class definition:
        </p>
<program language="java"><input>
<xi:include href="../../examples/code/simple-class.jsh" parse="text"/>
</input></program>
        <p>A Java file must contain one class designated as public using the <c>public</c> keyword before the class definition. It's also important to note that the filename must match the name of the public class, with <em>.java</em> at the end (similar to how an HTML file has <em>.html</em> at the end). For example, if we were to produce a Java file called <em>ExampleClass.java</em>, it could have the following as its contents:
        </p>

        <program language="java"><input><xi:include href="../../examples/code/ExampleClass.java" parse="text"/></input></program>
        <p>Inside of these curly braces is the class body in which its <term>members</term> are defined. Class members include method definitions, so we can include any of the method definitions we've been developing. If we make these methods static by including the <c>static</c> keyword before the method definition, we can use them like any other static method (such as <c>max</c> in the <c>Math</c> class). For instance, consider the following modification of the class definition above:
        </p>
      <program language="java"><input><xi:include href="../../examples/code/ExampleClassWithStaticMethod.java" parse="text"/></input></program>
        <p>Any other Java code we write, even in another file, could access this method as follows:
        </p>
<program language="java"><input>
ExampleClassWithStaticMethod.sayHello();
</input></program>
  <p>And in JShell, we could first use an import and then omit the class name when calling the method:
  </p>
<program language="java"><input>
import static ExampleClassWithStaticMethod.sayHello;
sayHello();
</input></program>
<p>If we want to use import statements in a Java file, they must all come before the class definitions (unlike JShell, where we could use import statements at any time). For example, if we want to use the <c>min</c> from the <c>Math</c> class in a method inside a class we define, we could import it at the top of the file:
</p>
<program language="java"><input>
import static java.lang.Math.min;

public class ExampleClassWithImport {
  public int getValidGrade(int rawGrade) {
    return min(100, rawGrade);
  }
}
</input></program>
    </subsection>
    <subsection>
        <title>Static Fields</title>
        <p>Methods aren't the only members we can add to a class. Variables can also be members, in which case they are called <term>fields</term>. For example, we can create a variable called <c>greeting</c> to hold the message we use in the <c>sayHello</c> method. This allows us to more easily maintain consistency with other methods that greet the user in other ways. <c>greeting</c> must also be declared static to be used as a general purpose method:
        </p>
        <program language="java"><input><xi:include href="../../examples/code/ClassWithMultipleStaticMethods.java" parse="text"/></input></program>
    </subsection>
    <subsection>
        <title>Scope of Fields</title>
        <p>Note that the variable <c>greeting</c> in the previous example is accessible in both of the static methods in the class. That is because the <term>scope</term> of the variable is the entire class definition body. Note that unlike other scope-limited variables, we can access the static scope of a class by giving the class name and following it with the dot operator:

<program language="java"><input>
ClassWithMultipleStaticMethods.sayHello();
ClassWithMultipleStaticMethods.sayHelloEmphatically();
</input></program>
        </p>

        <subsubsection>
            <title>Constants</title>
            <p>Because <c>greeting</c> is a member of the class, just like the <c>sayHello</c> method, it can be accessed from outside of the class as well. That means that the greeting could be modified from outside the class, such as in the following example:
            </p>

<program language="java"><input>
ClassWithMultipleStaticMethods.greeting = "Hey Jerk";
</input></program>

            <p>If a field is never meant to be altered, it should be made in to a <term>constant</term> by using the <c>final</c> keyword in its definition. Here is the updated definition of the running example that prevents any changes to the greeting field:
            </p>

          <program language="java"><input><xi:include href="../../examples/code/ClassWithConstant.java" parse="text"/></input></program>

        </subsubsection>
    </subsection>
</section>
